// GtkSharp.Generation.EnumGen.cs - The Enumeration Generatable.
//
// Author: Mike Kestner <mkestner@speakeasy.net>
//
// Copyright (c) 2001 Mike Kestner
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the GNU General Public
// License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace GtkSharp.Generation {

	// <enumeration name="BookmarkFileError" c:type="GBookmarkFileError" glib:error-domain="g-bookmark-file-error-quark">
	//   <doc xml:space="preserve">Error codes returned by bookmark file parsing.</doc>
	//   <member name = "invalid_uri" value="0" c:identifier="G_BOOKMARK_FILE_ERROR_INVALID_URI">
	//     <doc xml:space="preserve">URI was ill-formed</doc>
	//   </member>
	public class EnumGen : GenBase
	{
		// TODO:
		// See marshalling without casting

		class EnumMember
		{
			public string Name { get; private set; }
			public string Value { get; private set; }
			bool isBitField;

			public EnumMember (XmlElement elem, bool isBitField)
			{
				this.isBitField = isBitField;

				Name = elem.GetName ();
				Value = elem.GetAttribute (Constants.Value);
			}

			public bool Validate ()
			{
				if (isBitField) {
					int value = int.Parse (Value);
					Value = string.Format ("0x{0:X}", value);
				}
				return true;
			}

			public string Generate ()
			{
				return Name + " = " + Value + ",";
			}
		}

		string enum_type = String.Empty;
		readonly List<EnumMember> members = new List<EnumMember> ();
		bool isBitField;

		public EnumGen (XmlElement ns, XmlElement elem, bool isBitField) : base (ns, elem)
		{
			this.isBitField = isBitField;
			foreach (XmlElement member in elem.ChildNodes) {
				switch (member.Name) {
				case Constants.Member:
					var em = new EnumMember (member, isBitField);
					members.Add (em);
					break;
				default:
					Console.WriteLine ("Unable to parse element {0} of <{1}>", member.Name, Constants.Enumeration);
					break;
				}
			}
		}

		public override bool Validate ()
		{
			foreach (var member in members) {
				if (!member.Validate ())
					return false;
			}
			return true;
		}

		public override string DefaultValue {
			get {
				// TODO: Maybe return the first?
				return "(" + QualifiedName + ") 0";
			}
		}

		public override string MarshalType {
			get {
				// TODO: Maybe marshal it as enum?
				return "int";
			}
		}

		public override string CallByName (string var_name)
		{
			// TODO: if marshalled as enum, remove int
			return "(int) " + var_name;
		}

		public override string FromNative(string var)
		{
			return "(" + QualifiedName + ") " + var;
		}

		public override void Generate (GenerationInfo gen_info)
		{
			StreamWriter sw = gen_info.OpenStream (Name);

			sw.WriteLine ("namespace " + NS + " {");
			sw.WriteLine ();
			sw.WriteLine ("\tusing System;");
			sw.WriteLine ("\tusing System.Runtime.InteropServices;");
			sw.WriteLine ();

			sw.WriteLine ("#region Autogenerated code");

			if (isBitField)
				sw.WriteLine ("\t[Flags]");
			if (Elem.HasAttribute(Constants.GetGType))
				sw.WriteLine ("\t[{0}]", Name);

			string access = IsInternal ? "internal" : "public";
			sw.WriteLine ("\t" + access + " enum " + Name + enum_type + " {");
			sw.WriteLine ();

			foreach (var member in members)
				sw.WriteLine ("\t\t" + member.Generate ());

			sw.WriteLine ("\t}");

			if (Elem.HasAttribute (Constants.GetGType)) {
				AttributeHelper.Gen (sw, Name, LibraryName, Elem.GetAttribute (Constants.GetGType));
			}

			sw.WriteLine ("#endregion");
			sw.WriteLine ("}");
			sw.Close ();
			Statistics.EnumCount++;
		}
	}
}
